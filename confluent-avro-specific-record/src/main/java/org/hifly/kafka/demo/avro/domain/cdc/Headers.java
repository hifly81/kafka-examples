/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.hifly.kafka.demo.avro.domain.cdc;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Headers extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4569400743401121980L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Headers\",\"namespace\":\"org.hifly.kafka.demo.avro.domain.cdc\",\"fields\":[{\"name\":\"operation\",\"type\":{\"type\":\"enum\",\"name\":\"operation\",\"symbols\":[\"INSERT\",\"UPDATE\",\"DELETE\",\"REFRESH\"]}},{\"name\":\"changeSequence\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"string\"},{\"name\":\"streamPosition\",\"type\":\"string\"},{\"name\":\"transactionId\",\"type\":\"string\"},{\"name\":\"changeMask\",\"type\":[\"null\",\"bytes\"],\"default\":null},{\"name\":\"columnMask\",\"type\":[\"null\",\"bytes\"],\"default\":null},{\"name\":\"transactionEventCounter\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"transactionLastEvent\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Headers> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Headers> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Headers> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Headers> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Headers> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Headers to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Headers from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Headers instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Headers fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private org.hifly.kafka.demo.avro.domain.cdc.operation operation;
  private java.lang.CharSequence changeSequence;
  private java.lang.CharSequence timestamp;
  private java.lang.CharSequence streamPosition;
  private java.lang.CharSequence transactionId;
  private java.nio.ByteBuffer changeMask;
  private java.nio.ByteBuffer columnMask;
  private java.lang.Long transactionEventCounter;
  private java.lang.Boolean transactionLastEvent;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Headers() {}

  /**
   * All-args constructor.
   * @param operation The new value for operation
   * @param changeSequence The new value for changeSequence
   * @param timestamp The new value for timestamp
   * @param streamPosition The new value for streamPosition
   * @param transactionId The new value for transactionId
   * @param changeMask The new value for changeMask
   * @param columnMask The new value for columnMask
   * @param transactionEventCounter The new value for transactionEventCounter
   * @param transactionLastEvent The new value for transactionLastEvent
   */
  public Headers(org.hifly.kafka.demo.avro.domain.cdc.operation operation, java.lang.CharSequence changeSequence, java.lang.CharSequence timestamp, java.lang.CharSequence streamPosition, java.lang.CharSequence transactionId, java.nio.ByteBuffer changeMask, java.nio.ByteBuffer columnMask, java.lang.Long transactionEventCounter, java.lang.Boolean transactionLastEvent) {
    this.operation = operation;
    this.changeSequence = changeSequence;
    this.timestamp = timestamp;
    this.streamPosition = streamPosition;
    this.transactionId = transactionId;
    this.changeMask = changeMask;
    this.columnMask = columnMask;
    this.transactionEventCounter = transactionEventCounter;
    this.transactionLastEvent = transactionLastEvent;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return operation;
    case 1: return changeSequence;
    case 2: return timestamp;
    case 3: return streamPosition;
    case 4: return transactionId;
    case 5: return changeMask;
    case 6: return columnMask;
    case 7: return transactionEventCounter;
    case 8: return transactionLastEvent;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: operation = (org.hifly.kafka.demo.avro.domain.cdc.operation)value$; break;
    case 1: changeSequence = (java.lang.CharSequence)value$; break;
    case 2: timestamp = (java.lang.CharSequence)value$; break;
    case 3: streamPosition = (java.lang.CharSequence)value$; break;
    case 4: transactionId = (java.lang.CharSequence)value$; break;
    case 5: changeMask = (java.nio.ByteBuffer)value$; break;
    case 6: columnMask = (java.nio.ByteBuffer)value$; break;
    case 7: transactionEventCounter = (java.lang.Long)value$; break;
    case 8: transactionLastEvent = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'operation' field.
   * @return The value of the 'operation' field.
   */
  public org.hifly.kafka.demo.avro.domain.cdc.operation getOperation() {
    return operation;
  }


  /**
   * Sets the value of the 'operation' field.
   * @param value the value to set.
   */
  public void setOperation(org.hifly.kafka.demo.avro.domain.cdc.operation value) {
    this.operation = value;
  }

  /**
   * Gets the value of the 'changeSequence' field.
   * @return The value of the 'changeSequence' field.
   */
  public java.lang.CharSequence getChangeSequence() {
    return changeSequence;
  }


  /**
   * Sets the value of the 'changeSequence' field.
   * @param value the value to set.
   */
  public void setChangeSequence(java.lang.CharSequence value) {
    this.changeSequence = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'streamPosition' field.
   * @return The value of the 'streamPosition' field.
   */
  public java.lang.CharSequence getStreamPosition() {
    return streamPosition;
  }


  /**
   * Sets the value of the 'streamPosition' field.
   * @param value the value to set.
   */
  public void setStreamPosition(java.lang.CharSequence value) {
    this.streamPosition = value;
  }

  /**
   * Gets the value of the 'transactionId' field.
   * @return The value of the 'transactionId' field.
   */
  public java.lang.CharSequence getTransactionId() {
    return transactionId;
  }


  /**
   * Sets the value of the 'transactionId' field.
   * @param value the value to set.
   */
  public void setTransactionId(java.lang.CharSequence value) {
    this.transactionId = value;
  }

  /**
   * Gets the value of the 'changeMask' field.
   * @return The value of the 'changeMask' field.
   */
  public java.nio.ByteBuffer getChangeMask() {
    return changeMask;
  }


  /**
   * Sets the value of the 'changeMask' field.
   * @param value the value to set.
   */
  public void setChangeMask(java.nio.ByteBuffer value) {
    this.changeMask = value;
  }

  /**
   * Gets the value of the 'columnMask' field.
   * @return The value of the 'columnMask' field.
   */
  public java.nio.ByteBuffer getColumnMask() {
    return columnMask;
  }


  /**
   * Sets the value of the 'columnMask' field.
   * @param value the value to set.
   */
  public void setColumnMask(java.nio.ByteBuffer value) {
    this.columnMask = value;
  }

  /**
   * Gets the value of the 'transactionEventCounter' field.
   * @return The value of the 'transactionEventCounter' field.
   */
  public java.lang.Long getTransactionEventCounter() {
    return transactionEventCounter;
  }


  /**
   * Sets the value of the 'transactionEventCounter' field.
   * @param value the value to set.
   */
  public void setTransactionEventCounter(java.lang.Long value) {
    this.transactionEventCounter = value;
  }

  /**
   * Gets the value of the 'transactionLastEvent' field.
   * @return The value of the 'transactionLastEvent' field.
   */
  public java.lang.Boolean getTransactionLastEvent() {
    return transactionLastEvent;
  }


  /**
   * Sets the value of the 'transactionLastEvent' field.
   * @param value the value to set.
   */
  public void setTransactionLastEvent(java.lang.Boolean value) {
    this.transactionLastEvent = value;
  }

  /**
   * Creates a new Headers RecordBuilder.
   * @return A new Headers RecordBuilder
   */
  public static org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder newBuilder() {
    return new org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder();
  }

  /**
   * Creates a new Headers RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Headers RecordBuilder
   */
  public static org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder newBuilder(org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder other) {
    if (other == null) {
      return new org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder();
    } else {
      return new org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder(other);
    }
  }

  /**
   * Creates a new Headers RecordBuilder by copying an existing Headers instance.
   * @param other The existing instance to copy.
   * @return A new Headers RecordBuilder
   */
  public static org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder newBuilder(org.hifly.kafka.demo.avro.domain.cdc.Headers other) {
    if (other == null) {
      return new org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder();
    } else {
      return new org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder(other);
    }
  }

  /**
   * RecordBuilder for Headers instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Headers>
    implements org.apache.avro.data.RecordBuilder<Headers> {

    private org.hifly.kafka.demo.avro.domain.cdc.operation operation;
    private java.lang.CharSequence changeSequence;
    private java.lang.CharSequence timestamp;
    private java.lang.CharSequence streamPosition;
    private java.lang.CharSequence transactionId;
    private java.nio.ByteBuffer changeMask;
    private java.nio.ByteBuffer columnMask;
    private java.lang.Long transactionEventCounter;
    private java.lang.Boolean transactionLastEvent;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.operation)) {
        this.operation = data().deepCopy(fields()[0].schema(), other.operation);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.changeSequence)) {
        this.changeSequence = data().deepCopy(fields()[1].schema(), other.changeSequence);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.streamPosition)) {
        this.streamPosition = data().deepCopy(fields()[3].schema(), other.streamPosition);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[4].schema(), other.transactionId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.changeMask)) {
        this.changeMask = data().deepCopy(fields()[5].schema(), other.changeMask);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.columnMask)) {
        this.columnMask = data().deepCopy(fields()[6].schema(), other.columnMask);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.transactionEventCounter)) {
        this.transactionEventCounter = data().deepCopy(fields()[7].schema(), other.transactionEventCounter);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.transactionLastEvent)) {
        this.transactionLastEvent = data().deepCopy(fields()[8].schema(), other.transactionLastEvent);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing Headers instance
     * @param other The existing instance to copy.
     */
    private Builder(org.hifly.kafka.demo.avro.domain.cdc.Headers other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.operation)) {
        this.operation = data().deepCopy(fields()[0].schema(), other.operation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.changeSequence)) {
        this.changeSequence = data().deepCopy(fields()[1].schema(), other.changeSequence);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.streamPosition)) {
        this.streamPosition = data().deepCopy(fields()[3].schema(), other.streamPosition);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[4].schema(), other.transactionId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.changeMask)) {
        this.changeMask = data().deepCopy(fields()[5].schema(), other.changeMask);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.columnMask)) {
        this.columnMask = data().deepCopy(fields()[6].schema(), other.columnMask);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.transactionEventCounter)) {
        this.transactionEventCounter = data().deepCopy(fields()[7].schema(), other.transactionEventCounter);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.transactionLastEvent)) {
        this.transactionLastEvent = data().deepCopy(fields()[8].schema(), other.transactionLastEvent);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'operation' field.
      * @return The value.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.operation getOperation() {
      return operation;
    }


    /**
      * Sets the value of the 'operation' field.
      * @param value The value of 'operation'.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder setOperation(org.hifly.kafka.demo.avro.domain.cdc.operation value) {
      validate(fields()[0], value);
      this.operation = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'operation' field has been set.
      * @return True if the 'operation' field has been set, false otherwise.
      */
    public boolean hasOperation() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'operation' field.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder clearOperation() {
      operation = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'changeSequence' field.
      * @return The value.
      */
    public java.lang.CharSequence getChangeSequence() {
      return changeSequence;
    }


    /**
      * Sets the value of the 'changeSequence' field.
      * @param value The value of 'changeSequence'.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder setChangeSequence(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.changeSequence = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'changeSequence' field has been set.
      * @return True if the 'changeSequence' field has been set, false otherwise.
      */
    public boolean hasChangeSequence() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'changeSequence' field.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder clearChangeSequence() {
      changeSequence = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'streamPosition' field.
      * @return The value.
      */
    public java.lang.CharSequence getStreamPosition() {
      return streamPosition;
    }


    /**
      * Sets the value of the 'streamPosition' field.
      * @param value The value of 'streamPosition'.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder setStreamPosition(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.streamPosition = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'streamPosition' field has been set.
      * @return True if the 'streamPosition' field has been set, false otherwise.
      */
    public boolean hasStreamPosition() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'streamPosition' field.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder clearStreamPosition() {
      streamPosition = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionId' field.
      * @return The value.
      */
    public java.lang.CharSequence getTransactionId() {
      return transactionId;
    }


    /**
      * Sets the value of the 'transactionId' field.
      * @param value The value of 'transactionId'.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder setTransactionId(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.transactionId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionId' field has been set.
      * @return True if the 'transactionId' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'transactionId' field.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder clearTransactionId() {
      transactionId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'changeMask' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getChangeMask() {
      return changeMask;
    }


    /**
      * Sets the value of the 'changeMask' field.
      * @param value The value of 'changeMask'.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder setChangeMask(java.nio.ByteBuffer value) {
      validate(fields()[5], value);
      this.changeMask = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'changeMask' field has been set.
      * @return True if the 'changeMask' field has been set, false otherwise.
      */
    public boolean hasChangeMask() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'changeMask' field.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder clearChangeMask() {
      changeMask = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'columnMask' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getColumnMask() {
      return columnMask;
    }


    /**
      * Sets the value of the 'columnMask' field.
      * @param value The value of 'columnMask'.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder setColumnMask(java.nio.ByteBuffer value) {
      validate(fields()[6], value);
      this.columnMask = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'columnMask' field has been set.
      * @return True if the 'columnMask' field has been set, false otherwise.
      */
    public boolean hasColumnMask() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'columnMask' field.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder clearColumnMask() {
      columnMask = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionEventCounter' field.
      * @return The value.
      */
    public java.lang.Long getTransactionEventCounter() {
      return transactionEventCounter;
    }


    /**
      * Sets the value of the 'transactionEventCounter' field.
      * @param value The value of 'transactionEventCounter'.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder setTransactionEventCounter(java.lang.Long value) {
      validate(fields()[7], value);
      this.transactionEventCounter = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionEventCounter' field has been set.
      * @return True if the 'transactionEventCounter' field has been set, false otherwise.
      */
    public boolean hasTransactionEventCounter() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'transactionEventCounter' field.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder clearTransactionEventCounter() {
      transactionEventCounter = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionLastEvent' field.
      * @return The value.
      */
    public java.lang.Boolean getTransactionLastEvent() {
      return transactionLastEvent;
    }


    /**
      * Sets the value of the 'transactionLastEvent' field.
      * @param value The value of 'transactionLastEvent'.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder setTransactionLastEvent(java.lang.Boolean value) {
      validate(fields()[8], value);
      this.transactionLastEvent = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionLastEvent' field has been set.
      * @return True if the 'transactionLastEvent' field has been set, false otherwise.
      */
    public boolean hasTransactionLastEvent() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'transactionLastEvent' field.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder clearTransactionLastEvent() {
      transactionLastEvent = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Headers build() {
      try {
        Headers record = new Headers();
        record.operation = fieldSetFlags()[0] ? this.operation : (org.hifly.kafka.demo.avro.domain.cdc.operation) defaultValue(fields()[0]);
        record.changeSequence = fieldSetFlags()[1] ? this.changeSequence : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.streamPosition = fieldSetFlags()[3] ? this.streamPosition : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.transactionId = fieldSetFlags()[4] ? this.transactionId : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.changeMask = fieldSetFlags()[5] ? this.changeMask : (java.nio.ByteBuffer) defaultValue(fields()[5]);
        record.columnMask = fieldSetFlags()[6] ? this.columnMask : (java.nio.ByteBuffer) defaultValue(fields()[6]);
        record.transactionEventCounter = fieldSetFlags()[7] ? this.transactionEventCounter : (java.lang.Long) defaultValue(fields()[7]);
        record.transactionLastEvent = fieldSetFlags()[8] ? this.transactionLastEvent : (java.lang.Boolean) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Headers>
    WRITER$ = (org.apache.avro.io.DatumWriter<Headers>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Headers>
    READER$ = (org.apache.avro.io.DatumReader<Headers>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeEnum(this.operation.ordinal());

    out.writeString(this.changeSequence);

    out.writeString(this.timestamp);

    out.writeString(this.streamPosition);

    out.writeString(this.transactionId);

    if (this.changeMask == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBytes(this.changeMask);
    }

    if (this.columnMask == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBytes(this.columnMask);
    }

    if (this.transactionEventCounter == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.transactionEventCounter);
    }

    if (this.transactionLastEvent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.transactionLastEvent);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.operation = org.hifly.kafka.demo.avro.domain.cdc.operation.values()[in.readEnum()];

      this.changeSequence = in.readString(this.changeSequence instanceof Utf8 ? (Utf8)this.changeSequence : null);

      this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8)this.timestamp : null);

      this.streamPosition = in.readString(this.streamPosition instanceof Utf8 ? (Utf8)this.streamPosition : null);

      this.transactionId = in.readString(this.transactionId instanceof Utf8 ? (Utf8)this.transactionId : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.changeMask = null;
      } else {
        this.changeMask = in.readBytes(this.changeMask);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.columnMask = null;
      } else {
        this.columnMask = in.readBytes(this.columnMask);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.transactionEventCounter = null;
      } else {
        this.transactionEventCounter = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.transactionLastEvent = null;
      } else {
        this.transactionLastEvent = in.readBoolean();
      }

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.operation = org.hifly.kafka.demo.avro.domain.cdc.operation.values()[in.readEnum()];
          break;

        case 1:
          this.changeSequence = in.readString(this.changeSequence instanceof Utf8 ? (Utf8)this.changeSequence : null);
          break;

        case 2:
          this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8)this.timestamp : null);
          break;

        case 3:
          this.streamPosition = in.readString(this.streamPosition instanceof Utf8 ? (Utf8)this.streamPosition : null);
          break;

        case 4:
          this.transactionId = in.readString(this.transactionId instanceof Utf8 ? (Utf8)this.transactionId : null);
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.changeMask = null;
          } else {
            this.changeMask = in.readBytes(this.changeMask);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.columnMask = null;
          } else {
            this.columnMask = in.readBytes(this.columnMask);
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.transactionEventCounter = null;
          } else {
            this.transactionEventCounter = in.readLong();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.transactionLastEvent = null;
          } else {
            this.transactionLastEvent = in.readBoolean();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










