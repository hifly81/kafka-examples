/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.hifly.kafka.demo.avro.domain.cdc;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class KeyRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1648643568824817817L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"KeyRecord\",\"namespace\":\"org.hifly.kafka.demo.avro.domain.cdc\",\"fields\":[{\"name\":\"FIELD1\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":3,\"scale\":0}],\"default\":null},{\"name\":\"FIELD2\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":3,\"scale\":0}],\"default\":null},{\"name\":\"FIELD3\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":6,\"scale\":0}],\"default\":null},{\"name\":\"FIELD4\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":8,\"scale\":0}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<KeyRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<KeyRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<KeyRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<KeyRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<KeyRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this KeyRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a KeyRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a KeyRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static KeyRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.nio.ByteBuffer FIELD1;
  private java.nio.ByteBuffer FIELD2;
  private java.nio.ByteBuffer FIELD3;
  private java.nio.ByteBuffer FIELD4;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public KeyRecord() {}

  /**
   * All-args constructor.
   * @param FIELD1 The new value for FIELD1
   * @param FIELD2 The new value for FIELD2
   * @param FIELD3 The new value for FIELD3
   * @param FIELD4 The new value for FIELD4
   */
  public KeyRecord(java.nio.ByteBuffer FIELD1, java.nio.ByteBuffer FIELD2, java.nio.ByteBuffer FIELD3, java.nio.ByteBuffer FIELD4) {
    this.FIELD1 = FIELD1;
    this.FIELD2 = FIELD2;
    this.FIELD3 = FIELD3;
    this.FIELD4 = FIELD4;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return FIELD1;
    case 1: return FIELD2;
    case 2: return FIELD3;
    case 3: return FIELD4;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: FIELD1 = (java.nio.ByteBuffer)value$; break;
    case 1: FIELD2 = (java.nio.ByteBuffer)value$; break;
    case 2: FIELD3 = (java.nio.ByteBuffer)value$; break;
    case 3: FIELD4 = (java.nio.ByteBuffer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'FIELD1' field.
   * @return The value of the 'FIELD1' field.
   */
  public java.nio.ByteBuffer getFIELD1() {
    return FIELD1;
  }


  /**
   * Sets the value of the 'FIELD1' field.
   * @param value the value to set.
   */
  public void setFIELD1(java.nio.ByteBuffer value) {
    this.FIELD1 = value;
  }

  /**
   * Gets the value of the 'FIELD2' field.
   * @return The value of the 'FIELD2' field.
   */
  public java.nio.ByteBuffer getFIELD2() {
    return FIELD2;
  }


  /**
   * Sets the value of the 'FIELD2' field.
   * @param value the value to set.
   */
  public void setFIELD2(java.nio.ByteBuffer value) {
    this.FIELD2 = value;
  }

  /**
   * Gets the value of the 'FIELD3' field.
   * @return The value of the 'FIELD3' field.
   */
  public java.nio.ByteBuffer getFIELD3() {
    return FIELD3;
  }


  /**
   * Sets the value of the 'FIELD3' field.
   * @param value the value to set.
   */
  public void setFIELD3(java.nio.ByteBuffer value) {
    this.FIELD3 = value;
  }

  /**
   * Gets the value of the 'FIELD4' field.
   * @return The value of the 'FIELD4' field.
   */
  public java.nio.ByteBuffer getFIELD4() {
    return FIELD4;
  }


  /**
   * Sets the value of the 'FIELD4' field.
   * @param value the value to set.
   */
  public void setFIELD4(java.nio.ByteBuffer value) {
    this.FIELD4 = value;
  }

  /**
   * Creates a new KeyRecord RecordBuilder.
   * @return A new KeyRecord RecordBuilder
   */
  public static org.hifly.kafka.demo.avro.domain.cdc.KeyRecord.Builder newBuilder() {
    return new org.hifly.kafka.demo.avro.domain.cdc.KeyRecord.Builder();
  }

  /**
   * Creates a new KeyRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new KeyRecord RecordBuilder
   */
  public static org.hifly.kafka.demo.avro.domain.cdc.KeyRecord.Builder newBuilder(org.hifly.kafka.demo.avro.domain.cdc.KeyRecord.Builder other) {
    if (other == null) {
      return new org.hifly.kafka.demo.avro.domain.cdc.KeyRecord.Builder();
    } else {
      return new org.hifly.kafka.demo.avro.domain.cdc.KeyRecord.Builder(other);
    }
  }

  /**
   * Creates a new KeyRecord RecordBuilder by copying an existing KeyRecord instance.
   * @param other The existing instance to copy.
   * @return A new KeyRecord RecordBuilder
   */
  public static org.hifly.kafka.demo.avro.domain.cdc.KeyRecord.Builder newBuilder(org.hifly.kafka.demo.avro.domain.cdc.KeyRecord other) {
    if (other == null) {
      return new org.hifly.kafka.demo.avro.domain.cdc.KeyRecord.Builder();
    } else {
      return new org.hifly.kafka.demo.avro.domain.cdc.KeyRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for KeyRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<KeyRecord>
    implements org.apache.avro.data.RecordBuilder<KeyRecord> {

    private java.nio.ByteBuffer FIELD1;
    private java.nio.ByteBuffer FIELD2;
    private java.nio.ByteBuffer FIELD3;
    private java.nio.ByteBuffer FIELD4;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.hifly.kafka.demo.avro.domain.cdc.KeyRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.FIELD1)) {
        this.FIELD1 = data().deepCopy(fields()[0].schema(), other.FIELD1);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.FIELD2)) {
        this.FIELD2 = data().deepCopy(fields()[1].schema(), other.FIELD2);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.FIELD3)) {
        this.FIELD3 = data().deepCopy(fields()[2].schema(), other.FIELD3);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.FIELD4)) {
        this.FIELD4 = data().deepCopy(fields()[3].schema(), other.FIELD4);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing KeyRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(org.hifly.kafka.demo.avro.domain.cdc.KeyRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.FIELD1)) {
        this.FIELD1 = data().deepCopy(fields()[0].schema(), other.FIELD1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.FIELD2)) {
        this.FIELD2 = data().deepCopy(fields()[1].schema(), other.FIELD2);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.FIELD3)) {
        this.FIELD3 = data().deepCopy(fields()[2].schema(), other.FIELD3);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.FIELD4)) {
        this.FIELD4 = data().deepCopy(fields()[3].schema(), other.FIELD4);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'FIELD1' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getFIELD1() {
      return FIELD1;
    }


    /**
      * Sets the value of the 'FIELD1' field.
      * @param value The value of 'FIELD1'.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.KeyRecord.Builder setFIELD1(java.nio.ByteBuffer value) {
      validate(fields()[0], value);
      this.FIELD1 = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'FIELD1' field has been set.
      * @return True if the 'FIELD1' field has been set, false otherwise.
      */
    public boolean hasFIELD1() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'FIELD1' field.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.KeyRecord.Builder clearFIELD1() {
      FIELD1 = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'FIELD2' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getFIELD2() {
      return FIELD2;
    }


    /**
      * Sets the value of the 'FIELD2' field.
      * @param value The value of 'FIELD2'.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.KeyRecord.Builder setFIELD2(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.FIELD2 = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'FIELD2' field has been set.
      * @return True if the 'FIELD2' field has been set, false otherwise.
      */
    public boolean hasFIELD2() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'FIELD2' field.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.KeyRecord.Builder clearFIELD2() {
      FIELD2 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'FIELD3' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getFIELD3() {
      return FIELD3;
    }


    /**
      * Sets the value of the 'FIELD3' field.
      * @param value The value of 'FIELD3'.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.KeyRecord.Builder setFIELD3(java.nio.ByteBuffer value) {
      validate(fields()[2], value);
      this.FIELD3 = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'FIELD3' field has been set.
      * @return True if the 'FIELD3' field has been set, false otherwise.
      */
    public boolean hasFIELD3() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'FIELD3' field.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.KeyRecord.Builder clearFIELD3() {
      FIELD3 = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'FIELD4' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getFIELD4() {
      return FIELD4;
    }


    /**
      * Sets the value of the 'FIELD4' field.
      * @param value The value of 'FIELD4'.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.KeyRecord.Builder setFIELD4(java.nio.ByteBuffer value) {
      validate(fields()[3], value);
      this.FIELD4 = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'FIELD4' field has been set.
      * @return True if the 'FIELD4' field has been set, false otherwise.
      */
    public boolean hasFIELD4() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'FIELD4' field.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.KeyRecord.Builder clearFIELD4() {
      FIELD4 = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public KeyRecord build() {
      try {
        KeyRecord record = new KeyRecord();
        record.FIELD1 = fieldSetFlags()[0] ? this.FIELD1 : (java.nio.ByteBuffer) defaultValue(fields()[0]);
        record.FIELD2 = fieldSetFlags()[1] ? this.FIELD2 : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        record.FIELD3 = fieldSetFlags()[2] ? this.FIELD3 : (java.nio.ByteBuffer) defaultValue(fields()[2]);
        record.FIELD4 = fieldSetFlags()[3] ? this.FIELD4 : (java.nio.ByteBuffer) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<KeyRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<KeyRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<KeyRecord>
    READER$ = (org.apache.avro.io.DatumReader<KeyRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










