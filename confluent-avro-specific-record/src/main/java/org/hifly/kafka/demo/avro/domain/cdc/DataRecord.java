/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.hifly.kafka.demo.avro.domain.cdc;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DataRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 343860179062407177L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DataRecord\",\"namespace\":\"org.hifly.kafka.demo.avro.domain.cdc\",\"fields\":[{\"name\":\"data\",\"type\":{\"type\":\"record\",\"name\":\"Data\",\"fields\":[{\"name\":\"FIELD1\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":3,\"scale\":0}],\"default\":null},{\"name\":\"FIELD2\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":3,\"scale\":0}],\"default\":null},{\"name\":\"FIELD3\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":5,\"scale\":2}],\"default\":null}]}},{\"name\":\"beforeData\",\"type\":[\"null\",\"Data\"],\"default\":null},{\"name\":\"headers\",\"type\":{\"type\":\"record\",\"name\":\"Headers\",\"fields\":[{\"name\":\"operation\",\"type\":{\"type\":\"enum\",\"name\":\"operation\",\"symbols\":[\"INSERT\",\"UPDATE\",\"DELETE\",\"REFRESH\"]}},{\"name\":\"changeSequence\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"string\"},{\"name\":\"streamPosition\",\"type\":\"string\"},{\"name\":\"transactionId\",\"type\":\"string\"},{\"name\":\"changeMask\",\"type\":[\"null\",\"bytes\"],\"default\":null},{\"name\":\"columnMask\",\"type\":[\"null\",\"bytes\"],\"default\":null},{\"name\":\"transactionEventCounter\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"transactionLastEvent\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<DataRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DataRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DataRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DataRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DataRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DataRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DataRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DataRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DataRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private org.hifly.kafka.demo.avro.domain.cdc.Data data;
  private org.hifly.kafka.demo.avro.domain.cdc.Data beforeData;
  private org.hifly.kafka.demo.avro.domain.cdc.Headers headers;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DataRecord() {}

  /**
   * All-args constructor.
   * @param data The new value for data
   * @param beforeData The new value for beforeData
   * @param headers The new value for headers
   */
  public DataRecord(org.hifly.kafka.demo.avro.domain.cdc.Data data, org.hifly.kafka.demo.avro.domain.cdc.Data beforeData, org.hifly.kafka.demo.avro.domain.cdc.Headers headers) {
    this.data = data;
    this.beforeData = beforeData;
    this.headers = headers;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return data;
    case 1: return beforeData;
    case 2: return headers;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: data = (org.hifly.kafka.demo.avro.domain.cdc.Data)value$; break;
    case 1: beforeData = (org.hifly.kafka.demo.avro.domain.cdc.Data)value$; break;
    case 2: headers = (org.hifly.kafka.demo.avro.domain.cdc.Headers)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'data' field.
   * @return The value of the 'data' field.
   */
  public org.hifly.kafka.demo.avro.domain.cdc.Data getData() {
    return data;
  }


  /**
   * Sets the value of the 'data' field.
   * @param value the value to set.
   */
  public void setData(org.hifly.kafka.demo.avro.domain.cdc.Data value) {
    this.data = value;
  }

  /**
   * Gets the value of the 'beforeData' field.
   * @return The value of the 'beforeData' field.
   */
  public org.hifly.kafka.demo.avro.domain.cdc.Data getBeforeData() {
    return beforeData;
  }


  /**
   * Sets the value of the 'beforeData' field.
   * @param value the value to set.
   */
  public void setBeforeData(org.hifly.kafka.demo.avro.domain.cdc.Data value) {
    this.beforeData = value;
  }

  /**
   * Gets the value of the 'headers' field.
   * @return The value of the 'headers' field.
   */
  public org.hifly.kafka.demo.avro.domain.cdc.Headers getHeaders() {
    return headers;
  }


  /**
   * Sets the value of the 'headers' field.
   * @param value the value to set.
   */
  public void setHeaders(org.hifly.kafka.demo.avro.domain.cdc.Headers value) {
    this.headers = value;
  }

  /**
   * Creates a new DataRecord RecordBuilder.
   * @return A new DataRecord RecordBuilder
   */
  public static org.hifly.kafka.demo.avro.domain.cdc.DataRecord.Builder newBuilder() {
    return new org.hifly.kafka.demo.avro.domain.cdc.DataRecord.Builder();
  }

  /**
   * Creates a new DataRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DataRecord RecordBuilder
   */
  public static org.hifly.kafka.demo.avro.domain.cdc.DataRecord.Builder newBuilder(org.hifly.kafka.demo.avro.domain.cdc.DataRecord.Builder other) {
    if (other == null) {
      return new org.hifly.kafka.demo.avro.domain.cdc.DataRecord.Builder();
    } else {
      return new org.hifly.kafka.demo.avro.domain.cdc.DataRecord.Builder(other);
    }
  }

  /**
   * Creates a new DataRecord RecordBuilder by copying an existing DataRecord instance.
   * @param other The existing instance to copy.
   * @return A new DataRecord RecordBuilder
   */
  public static org.hifly.kafka.demo.avro.domain.cdc.DataRecord.Builder newBuilder(org.hifly.kafka.demo.avro.domain.cdc.DataRecord other) {
    if (other == null) {
      return new org.hifly.kafka.demo.avro.domain.cdc.DataRecord.Builder();
    } else {
      return new org.hifly.kafka.demo.avro.domain.cdc.DataRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for DataRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DataRecord>
    implements org.apache.avro.data.RecordBuilder<DataRecord> {

    private org.hifly.kafka.demo.avro.domain.cdc.Data data;
    private org.hifly.kafka.demo.avro.domain.cdc.Data.Builder dataBuilder;
    private org.hifly.kafka.demo.avro.domain.cdc.Data beforeData;
    private org.hifly.kafka.demo.avro.domain.cdc.Data.Builder beforeDataBuilder;
    private org.hifly.kafka.demo.avro.domain.cdc.Headers headers;
    private org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder headersBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.hifly.kafka.demo.avro.domain.cdc.DataRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.data)) {
        this.data = data().deepCopy(fields()[0].schema(), other.data);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasDataBuilder()) {
        this.dataBuilder = org.hifly.kafka.demo.avro.domain.cdc.Data.newBuilder(other.getDataBuilder());
      }
      if (isValidValue(fields()[1], other.beforeData)) {
        this.beforeData = data().deepCopy(fields()[1].schema(), other.beforeData);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasBeforeDataBuilder()) {
        this.beforeDataBuilder = org.hifly.kafka.demo.avro.domain.cdc.Data.newBuilder(other.getBeforeDataBuilder());
      }
      if (isValidValue(fields()[2], other.headers)) {
        this.headers = data().deepCopy(fields()[2].schema(), other.headers);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasHeadersBuilder()) {
        this.headersBuilder = org.hifly.kafka.demo.avro.domain.cdc.Headers.newBuilder(other.getHeadersBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing DataRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(org.hifly.kafka.demo.avro.domain.cdc.DataRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.data)) {
        this.data = data().deepCopy(fields()[0].schema(), other.data);
        fieldSetFlags()[0] = true;
      }
      this.dataBuilder = null;
      if (isValidValue(fields()[1], other.beforeData)) {
        this.beforeData = data().deepCopy(fields()[1].schema(), other.beforeData);
        fieldSetFlags()[1] = true;
      }
      this.beforeDataBuilder = null;
      if (isValidValue(fields()[2], other.headers)) {
        this.headers = data().deepCopy(fields()[2].schema(), other.headers);
        fieldSetFlags()[2] = true;
      }
      this.headersBuilder = null;
    }

    /**
      * Gets the value of the 'data' field.
      * @return The value.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.Data getData() {
      return data;
    }


    /**
      * Sets the value of the 'data' field.
      * @param value The value of 'data'.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.DataRecord.Builder setData(org.hifly.kafka.demo.avro.domain.cdc.Data value) {
      validate(fields()[0], value);
      this.dataBuilder = null;
      this.data = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'data' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.hifly.kafka.demo.avro.domain.cdc.Data.Builder getDataBuilder() {
      if (dataBuilder == null) {
        if (hasData()) {
          setDataBuilder(org.hifly.kafka.demo.avro.domain.cdc.Data.newBuilder(data));
        } else {
          setDataBuilder(org.hifly.kafka.demo.avro.domain.cdc.Data.newBuilder());
        }
      }
      return dataBuilder;
    }

    /**
     * Sets the Builder instance for the 'data' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.hifly.kafka.demo.avro.domain.cdc.DataRecord.Builder setDataBuilder(org.hifly.kafka.demo.avro.domain.cdc.Data.Builder value) {
      clearData();
      dataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'data' field has an active Builder instance
     * @return True if the 'data' field has an active Builder instance
     */
    public boolean hasDataBuilder() {
      return dataBuilder != null;
    }

    /**
      * Clears the value of the 'data' field.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.DataRecord.Builder clearData() {
      data = null;
      dataBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'beforeData' field.
      * @return The value.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.Data getBeforeData() {
      return beforeData;
    }


    /**
      * Sets the value of the 'beforeData' field.
      * @param value The value of 'beforeData'.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.DataRecord.Builder setBeforeData(org.hifly.kafka.demo.avro.domain.cdc.Data value) {
      validate(fields()[1], value);
      this.beforeDataBuilder = null;
      this.beforeData = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'beforeData' field has been set.
      * @return True if the 'beforeData' field has been set, false otherwise.
      */
    public boolean hasBeforeData() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'beforeData' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.hifly.kafka.demo.avro.domain.cdc.Data.Builder getBeforeDataBuilder() {
      if (beforeDataBuilder == null) {
        if (hasBeforeData()) {
          setBeforeDataBuilder(org.hifly.kafka.demo.avro.domain.cdc.Data.newBuilder(beforeData));
        } else {
          setBeforeDataBuilder(org.hifly.kafka.demo.avro.domain.cdc.Data.newBuilder());
        }
      }
      return beforeDataBuilder;
    }

    /**
     * Sets the Builder instance for the 'beforeData' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.hifly.kafka.demo.avro.domain.cdc.DataRecord.Builder setBeforeDataBuilder(org.hifly.kafka.demo.avro.domain.cdc.Data.Builder value) {
      clearBeforeData();
      beforeDataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'beforeData' field has an active Builder instance
     * @return True if the 'beforeData' field has an active Builder instance
     */
    public boolean hasBeforeDataBuilder() {
      return beforeDataBuilder != null;
    }

    /**
      * Clears the value of the 'beforeData' field.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.DataRecord.Builder clearBeforeData() {
      beforeData = null;
      beforeDataBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'headers' field.
      * @return The value.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.Headers getHeaders() {
      return headers;
    }


    /**
      * Sets the value of the 'headers' field.
      * @param value The value of 'headers'.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.DataRecord.Builder setHeaders(org.hifly.kafka.demo.avro.domain.cdc.Headers value) {
      validate(fields()[2], value);
      this.headersBuilder = null;
      this.headers = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'headers' field has been set.
      * @return True if the 'headers' field has been set, false otherwise.
      */
    public boolean hasHeaders() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'headers' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder getHeadersBuilder() {
      if (headersBuilder == null) {
        if (hasHeaders()) {
          setHeadersBuilder(org.hifly.kafka.demo.avro.domain.cdc.Headers.newBuilder(headers));
        } else {
          setHeadersBuilder(org.hifly.kafka.demo.avro.domain.cdc.Headers.newBuilder());
        }
      }
      return headersBuilder;
    }

    /**
     * Sets the Builder instance for the 'headers' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.hifly.kafka.demo.avro.domain.cdc.DataRecord.Builder setHeadersBuilder(org.hifly.kafka.demo.avro.domain.cdc.Headers.Builder value) {
      clearHeaders();
      headersBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'headers' field has an active Builder instance
     * @return True if the 'headers' field has an active Builder instance
     */
    public boolean hasHeadersBuilder() {
      return headersBuilder != null;
    }

    /**
      * Clears the value of the 'headers' field.
      * @return This builder.
      */
    public org.hifly.kafka.demo.avro.domain.cdc.DataRecord.Builder clearHeaders() {
      headers = null;
      headersBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DataRecord build() {
      try {
        DataRecord record = new DataRecord();
        if (dataBuilder != null) {
          try {
            record.data = this.dataBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("data"));
            throw e;
          }
        } else {
          record.data = fieldSetFlags()[0] ? this.data : (org.hifly.kafka.demo.avro.domain.cdc.Data) defaultValue(fields()[0]);
        }
        if (beforeDataBuilder != null) {
          try {
            record.beforeData = this.beforeDataBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("beforeData"));
            throw e;
          }
        } else {
          record.beforeData = fieldSetFlags()[1] ? this.beforeData : (org.hifly.kafka.demo.avro.domain.cdc.Data) defaultValue(fields()[1]);
        }
        if (headersBuilder != null) {
          try {
            record.headers = this.headersBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("headers"));
            throw e;
          }
        } else {
          record.headers = fieldSetFlags()[2] ? this.headers : (org.hifly.kafka.demo.avro.domain.cdc.Headers) defaultValue(fields()[2]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DataRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<DataRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DataRecord>
    READER$ = (org.apache.avro.io.DatumReader<DataRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










