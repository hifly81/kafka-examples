/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.hifly.saga.payment.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Order extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5932381406383258055L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Order\",\"namespace\":\"org.hifly.saga.payment.model\",\"fields\":[{\"name\":\"ACCOUNT_ID\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"AMOUNT\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"ITEM_ID\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"ORDER_ID\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"PAYEE\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"TYPOLOGY\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"TIMESTAMP\",\"type\":[\"null\",\"string\"],\"default\":null}],\"connect.name\":\"org.hifly.saga.payment.model.Order\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Order> ENCODER =
      new BinaryMessageEncoder<Order>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Order> DECODER =
      new BinaryMessageDecoder<Order>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Order> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Order> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Order> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Order>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Order to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Order from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Order instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Order fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence ACCOUNT_ID;
  @Deprecated public java.lang.Double AMOUNT;
  @Deprecated public java.lang.CharSequence ITEM_ID;
  @Deprecated public java.lang.CharSequence ORDER_ID;
  @Deprecated public java.lang.CharSequence PAYEE;
  @Deprecated public java.lang.CharSequence TYPOLOGY;
  @Deprecated public java.lang.CharSequence TIMESTAMP;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Order() {}

  /**
   * All-args constructor.
   * @param ACCOUNT_ID The new value for ACCOUNT_ID
   * @param AMOUNT The new value for AMOUNT
   * @param ITEM_ID The new value for ITEM_ID
   * @param ORDER_ID The new value for ORDER_ID
   * @param PAYEE The new value for PAYEE
   * @param TYPOLOGY The new value for TYPOLOGY
   * @param TIMESTAMP The new value for TIMESTAMP
   */
  public Order(java.lang.CharSequence ACCOUNT_ID, java.lang.Double AMOUNT, java.lang.CharSequence ITEM_ID, java.lang.CharSequence ORDER_ID, java.lang.CharSequence PAYEE, java.lang.CharSequence TYPOLOGY, java.lang.CharSequence TIMESTAMP) {
    this.ACCOUNT_ID = ACCOUNT_ID;
    this.AMOUNT = AMOUNT;
    this.ITEM_ID = ITEM_ID;
    this.ORDER_ID = ORDER_ID;
    this.PAYEE = PAYEE;
    this.TYPOLOGY = TYPOLOGY;
    this.TIMESTAMP = TIMESTAMP;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ACCOUNT_ID;
    case 1: return AMOUNT;
    case 2: return ITEM_ID;
    case 3: return ORDER_ID;
    case 4: return PAYEE;
    case 5: return TYPOLOGY;
    case 6: return TIMESTAMP;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ACCOUNT_ID = (java.lang.CharSequence)value$; break;
    case 1: AMOUNT = (java.lang.Double)value$; break;
    case 2: ITEM_ID = (java.lang.CharSequence)value$; break;
    case 3: ORDER_ID = (java.lang.CharSequence)value$; break;
    case 4: PAYEE = (java.lang.CharSequence)value$; break;
    case 5: TYPOLOGY = (java.lang.CharSequence)value$; break;
    case 6: TIMESTAMP = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ACCOUNT_ID' field.
   * @return The value of the 'ACCOUNT_ID' field.
   */
  public java.lang.CharSequence getACCOUNTID() {
    return ACCOUNT_ID;
  }


  /**
   * Sets the value of the 'ACCOUNT_ID' field.
   * @param value the value to set.
   */
  public void setACCOUNTID(java.lang.CharSequence value) {
    this.ACCOUNT_ID = value;
  }

  /**
   * Gets the value of the 'AMOUNT' field.
   * @return The value of the 'AMOUNT' field.
   */
  public java.lang.Double getAMOUNT() {
    return AMOUNT;
  }


  /**
   * Sets the value of the 'AMOUNT' field.
   * @param value the value to set.
   */
  public void setAMOUNT(java.lang.Double value) {
    this.AMOUNT = value;
  }

  /**
   * Gets the value of the 'ITEM_ID' field.
   * @return The value of the 'ITEM_ID' field.
   */
  public java.lang.CharSequence getITEMID() {
    return ITEM_ID;
  }


  /**
   * Sets the value of the 'ITEM_ID' field.
   * @param value the value to set.
   */
  public void setITEMID(java.lang.CharSequence value) {
    this.ITEM_ID = value;
  }

  /**
   * Gets the value of the 'ORDER_ID' field.
   * @return The value of the 'ORDER_ID' field.
   */
  public java.lang.CharSequence getORDERID() {
    return ORDER_ID;
  }


  /**
   * Sets the value of the 'ORDER_ID' field.
   * @param value the value to set.
   */
  public void setORDERID(java.lang.CharSequence value) {
    this.ORDER_ID = value;
  }

  /**
   * Gets the value of the 'PAYEE' field.
   * @return The value of the 'PAYEE' field.
   */
  public java.lang.CharSequence getPAYEE() {
    return PAYEE;
  }


  /**
   * Sets the value of the 'PAYEE' field.
   * @param value the value to set.
   */
  public void setPAYEE(java.lang.CharSequence value) {
    this.PAYEE = value;
  }

  /**
   * Gets the value of the 'TYPOLOGY' field.
   * @return The value of the 'TYPOLOGY' field.
   */
  public java.lang.CharSequence getTYPOLOGY() {
    return TYPOLOGY;
  }


  /**
   * Sets the value of the 'TYPOLOGY' field.
   * @param value the value to set.
   */
  public void setTYPOLOGY(java.lang.CharSequence value) {
    this.TYPOLOGY = value;
  }

  /**
   * Gets the value of the 'TIMESTAMP' field.
   * @return The value of the 'TIMESTAMP' field.
   */
  public java.lang.CharSequence getTIMESTAMP() {
    return TIMESTAMP;
  }


  /**
   * Sets the value of the 'TIMESTAMP' field.
   * @param value the value to set.
   */
  public void setTIMESTAMP(java.lang.CharSequence value) {
    this.TIMESTAMP = value;
  }

  /**
   * Creates a new Order RecordBuilder.
   * @return A new Order RecordBuilder
   */
  public static org.hifly.saga.payment.model.Order.Builder newBuilder() {
    return new org.hifly.saga.payment.model.Order.Builder();
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Order RecordBuilder
   */
  public static org.hifly.saga.payment.model.Order.Builder newBuilder(org.hifly.saga.payment.model.Order.Builder other) {
    if (other == null) {
      return new org.hifly.saga.payment.model.Order.Builder();
    } else {
      return new org.hifly.saga.payment.model.Order.Builder(other);
    }
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Order instance.
   * @param other The existing instance to copy.
   * @return A new Order RecordBuilder
   */
  public static org.hifly.saga.payment.model.Order.Builder newBuilder(org.hifly.saga.payment.model.Order other) {
    if (other == null) {
      return new org.hifly.saga.payment.model.Order.Builder();
    } else {
      return new org.hifly.saga.payment.model.Order.Builder(other);
    }
  }

  /**
   * RecordBuilder for Order instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Order>
    implements org.apache.avro.data.RecordBuilder<Order> {

    private java.lang.CharSequence ACCOUNT_ID;
    private java.lang.Double AMOUNT;
    private java.lang.CharSequence ITEM_ID;
    private java.lang.CharSequence ORDER_ID;
    private java.lang.CharSequence PAYEE;
    private java.lang.CharSequence TYPOLOGY;
    private java.lang.CharSequence TIMESTAMP;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.hifly.saga.payment.model.Order.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ACCOUNT_ID)) {
        this.ACCOUNT_ID = data().deepCopy(fields()[0].schema(), other.ACCOUNT_ID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.AMOUNT)) {
        this.AMOUNT = data().deepCopy(fields()[1].schema(), other.AMOUNT);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.ITEM_ID)) {
        this.ITEM_ID = data().deepCopy(fields()[2].schema(), other.ITEM_ID);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.ORDER_ID)) {
        this.ORDER_ID = data().deepCopy(fields()[3].schema(), other.ORDER_ID);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.PAYEE)) {
        this.PAYEE = data().deepCopy(fields()[4].schema(), other.PAYEE);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.TYPOLOGY)) {
        this.TYPOLOGY = data().deepCopy(fields()[5].schema(), other.TYPOLOGY);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.TIMESTAMP)) {
        this.TIMESTAMP = data().deepCopy(fields()[6].schema(), other.TIMESTAMP);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing Order instance
     * @param other The existing instance to copy.
     */
    private Builder(org.hifly.saga.payment.model.Order other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.ACCOUNT_ID)) {
        this.ACCOUNT_ID = data().deepCopy(fields()[0].schema(), other.ACCOUNT_ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.AMOUNT)) {
        this.AMOUNT = data().deepCopy(fields()[1].schema(), other.AMOUNT);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ITEM_ID)) {
        this.ITEM_ID = data().deepCopy(fields()[2].schema(), other.ITEM_ID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ORDER_ID)) {
        this.ORDER_ID = data().deepCopy(fields()[3].schema(), other.ORDER_ID);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.PAYEE)) {
        this.PAYEE = data().deepCopy(fields()[4].schema(), other.PAYEE);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.TYPOLOGY)) {
        this.TYPOLOGY = data().deepCopy(fields()[5].schema(), other.TYPOLOGY);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.TIMESTAMP)) {
        this.TIMESTAMP = data().deepCopy(fields()[6].schema(), other.TIMESTAMP);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'ACCOUNT_ID' field.
      * @return The value.
      */
    public java.lang.CharSequence getACCOUNTID() {
      return ACCOUNT_ID;
    }


    /**
      * Sets the value of the 'ACCOUNT_ID' field.
      * @param value The value of 'ACCOUNT_ID'.
      * @return This builder.
      */
    public org.hifly.saga.payment.model.Order.Builder setACCOUNTID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.ACCOUNT_ID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ACCOUNT_ID' field has been set.
      * @return True if the 'ACCOUNT_ID' field has been set, false otherwise.
      */
    public boolean hasACCOUNTID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ACCOUNT_ID' field.
      * @return This builder.
      */
    public org.hifly.saga.payment.model.Order.Builder clearACCOUNTID() {
      ACCOUNT_ID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'AMOUNT' field.
      * @return The value.
      */
    public java.lang.Double getAMOUNT() {
      return AMOUNT;
    }


    /**
      * Sets the value of the 'AMOUNT' field.
      * @param value The value of 'AMOUNT'.
      * @return This builder.
      */
    public org.hifly.saga.payment.model.Order.Builder setAMOUNT(java.lang.Double value) {
      validate(fields()[1], value);
      this.AMOUNT = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'AMOUNT' field has been set.
      * @return True if the 'AMOUNT' field has been set, false otherwise.
      */
    public boolean hasAMOUNT() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'AMOUNT' field.
      * @return This builder.
      */
    public org.hifly.saga.payment.model.Order.Builder clearAMOUNT() {
      AMOUNT = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ITEM_ID' field.
      * @return The value.
      */
    public java.lang.CharSequence getITEMID() {
      return ITEM_ID;
    }


    /**
      * Sets the value of the 'ITEM_ID' field.
      * @param value The value of 'ITEM_ID'.
      * @return This builder.
      */
    public org.hifly.saga.payment.model.Order.Builder setITEMID(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.ITEM_ID = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ITEM_ID' field has been set.
      * @return True if the 'ITEM_ID' field has been set, false otherwise.
      */
    public boolean hasITEMID() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ITEM_ID' field.
      * @return This builder.
      */
    public org.hifly.saga.payment.model.Order.Builder clearITEMID() {
      ITEM_ID = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ORDER_ID' field.
      * @return The value.
      */
    public java.lang.CharSequence getORDERID() {
      return ORDER_ID;
    }


    /**
      * Sets the value of the 'ORDER_ID' field.
      * @param value The value of 'ORDER_ID'.
      * @return This builder.
      */
    public org.hifly.saga.payment.model.Order.Builder setORDERID(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.ORDER_ID = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ORDER_ID' field has been set.
      * @return True if the 'ORDER_ID' field has been set, false otherwise.
      */
    public boolean hasORDERID() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ORDER_ID' field.
      * @return This builder.
      */
    public org.hifly.saga.payment.model.Order.Builder clearORDERID() {
      ORDER_ID = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'PAYEE' field.
      * @return The value.
      */
    public java.lang.CharSequence getPAYEE() {
      return PAYEE;
    }


    /**
      * Sets the value of the 'PAYEE' field.
      * @param value The value of 'PAYEE'.
      * @return This builder.
      */
    public org.hifly.saga.payment.model.Order.Builder setPAYEE(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.PAYEE = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'PAYEE' field has been set.
      * @return True if the 'PAYEE' field has been set, false otherwise.
      */
    public boolean hasPAYEE() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'PAYEE' field.
      * @return This builder.
      */
    public org.hifly.saga.payment.model.Order.Builder clearPAYEE() {
      PAYEE = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'TYPOLOGY' field.
      * @return The value.
      */
    public java.lang.CharSequence getTYPOLOGY() {
      return TYPOLOGY;
    }


    /**
      * Sets the value of the 'TYPOLOGY' field.
      * @param value The value of 'TYPOLOGY'.
      * @return This builder.
      */
    public org.hifly.saga.payment.model.Order.Builder setTYPOLOGY(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.TYPOLOGY = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'TYPOLOGY' field has been set.
      * @return True if the 'TYPOLOGY' field has been set, false otherwise.
      */
    public boolean hasTYPOLOGY() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'TYPOLOGY' field.
      * @return This builder.
      */
    public org.hifly.saga.payment.model.Order.Builder clearTYPOLOGY() {
      TYPOLOGY = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'TIMESTAMP' field.
      * @return The value.
      */
    public java.lang.CharSequence getTIMESTAMP() {
      return TIMESTAMP;
    }


    /**
      * Sets the value of the 'TIMESTAMP' field.
      * @param value The value of 'TIMESTAMP'.
      * @return This builder.
      */
    public org.hifly.saga.payment.model.Order.Builder setTIMESTAMP(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.TIMESTAMP = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'TIMESTAMP' field has been set.
      * @return True if the 'TIMESTAMP' field has been set, false otherwise.
      */
    public boolean hasTIMESTAMP() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'TIMESTAMP' field.
      * @return This builder.
      */
    public org.hifly.saga.payment.model.Order.Builder clearTIMESTAMP() {
      TIMESTAMP = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Order build() {
      try {
        Order record = new Order();
        record.ACCOUNT_ID = fieldSetFlags()[0] ? this.ACCOUNT_ID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.AMOUNT = fieldSetFlags()[1] ? this.AMOUNT : (java.lang.Double) defaultValue(fields()[1]);
        record.ITEM_ID = fieldSetFlags()[2] ? this.ITEM_ID : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.ORDER_ID = fieldSetFlags()[3] ? this.ORDER_ID : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.PAYEE = fieldSetFlags()[4] ? this.PAYEE : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.TYPOLOGY = fieldSetFlags()[5] ? this.TYPOLOGY : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.TIMESTAMP = fieldSetFlags()[6] ? this.TIMESTAMP : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Order>
    WRITER$ = (org.apache.avro.io.DatumWriter<Order>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Order>
    READER$ = (org.apache.avro.io.DatumReader<Order>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.ACCOUNT_ID == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.ACCOUNT_ID);
    }

    if (this.AMOUNT == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.AMOUNT);
    }

    if (this.ITEM_ID == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.ITEM_ID);
    }

    if (this.ORDER_ID == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.ORDER_ID);
    }

    if (this.PAYEE == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.PAYEE);
    }

    if (this.TYPOLOGY == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.TYPOLOGY);
    }

    if (this.TIMESTAMP == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.TIMESTAMP);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.ACCOUNT_ID = null;
      } else {
        this.ACCOUNT_ID = in.readString(this.ACCOUNT_ID instanceof Utf8 ? (Utf8)this.ACCOUNT_ID : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.AMOUNT = null;
      } else {
        this.AMOUNT = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.ITEM_ID = null;
      } else {
        this.ITEM_ID = in.readString(this.ITEM_ID instanceof Utf8 ? (Utf8)this.ITEM_ID : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.ORDER_ID = null;
      } else {
        this.ORDER_ID = in.readString(this.ORDER_ID instanceof Utf8 ? (Utf8)this.ORDER_ID : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.PAYEE = null;
      } else {
        this.PAYEE = in.readString(this.PAYEE instanceof Utf8 ? (Utf8)this.PAYEE : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.TYPOLOGY = null;
      } else {
        this.TYPOLOGY = in.readString(this.TYPOLOGY instanceof Utf8 ? (Utf8)this.TYPOLOGY : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.TIMESTAMP = null;
      } else {
        this.TIMESTAMP = in.readString(this.TIMESTAMP instanceof Utf8 ? (Utf8)this.TIMESTAMP : null);
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.ACCOUNT_ID = null;
          } else {
            this.ACCOUNT_ID = in.readString(this.ACCOUNT_ID instanceof Utf8 ? (Utf8)this.ACCOUNT_ID : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.AMOUNT = null;
          } else {
            this.AMOUNT = in.readDouble();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.ITEM_ID = null;
          } else {
            this.ITEM_ID = in.readString(this.ITEM_ID instanceof Utf8 ? (Utf8)this.ITEM_ID : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.ORDER_ID = null;
          } else {
            this.ORDER_ID = in.readString(this.ORDER_ID instanceof Utf8 ? (Utf8)this.ORDER_ID : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.PAYEE = null;
          } else {
            this.PAYEE = in.readString(this.PAYEE instanceof Utf8 ? (Utf8)this.PAYEE : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.TYPOLOGY = null;
          } else {
            this.TYPOLOGY = in.readString(this.TYPOLOGY instanceof Utf8 ? (Utf8)this.TYPOLOGY : null);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.TIMESTAMP = null;
          } else {
            this.TIMESTAMP = in.readString(this.TIMESTAMP instanceof Utf8 ? (Utf8)this.TIMESTAMP : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










